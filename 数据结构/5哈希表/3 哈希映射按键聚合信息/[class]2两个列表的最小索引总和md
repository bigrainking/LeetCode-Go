# 一、题目

[599. 两个列表的最小索引总和](https://leetcode.cn/problems/minimum-index-sum-of-two-lists/)

战绩:dagger:完成了大部分； 如何保留最小索引和的餐厅没做出来

# 二、解析

## 1）哈希表法:

 

### 1.1 解析：

很容易想到：将list1写入hashTable，遍历list2在hashTable中寻找共同喜欢的餐厅。

但如何查找出所有(多个)索引值最小的餐厅呢？

- 如果只有一个最小餐厅可以不断维护更新一个最小索引值



### 1.2 难点解决：

用一个restaurants = []string{}装所有餐厅，

- 当前index1+index2 == sumIndex : 将当前餐厅append进restaurants
- 当前index1+index2 < sumIndex : 清空,并将当前餐厅加入
- 否则继续找下一个相同喜好的餐厅



#### 复杂度分析：

Time： O(n+m) 两个链表长度不同，遍历两个链表

Space：O(n) hashTable， restaurant长度小于任何一个链表

### 1.3 代码：

- 判断hash[key]是否存在用：p, ok := hash[key]的方式
   - 此处value值是索引值>=0, 如果不存在key-value时，hash[key]不一定<0

- sumIndex := math.MaxInt32初始值设为最大，不要999,len(list)会超过999,index必然也是

```go
func findRestaurant(list1 []string, list2 []string) []string {
    hashTable := map[string]int{}
    restaurants, sumIndex := []string{}, math.MaxInt32
    // list1全部存入
    for index1, l := range list1 {
        hashTable[l] = index1
    }
    // 寻找相同喜好的餐厅
    for index2, l2 := range list2 {
        // 有相同喜欢的餐厅
        if index1, ok := hashTable[l2]; ok {
            newSum := index1 + index2
            if newSum == sumIndex {
                restaurants = append(restaurants, l2)
            }else if newSum < sumIndex { //清空当前列表，填入新的更小的餐厅
                sumIndex = newSum
                restaurants = []string{l2}
            }
        }
    }
    return restaurants
}
```



